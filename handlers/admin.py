from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import get_admin_keyboard, get_cancel_keyboard
from database import get_admin_list, get_users_stats, get_all_users
import asyncio

admin_router = Router()

class AdminFilter(Filter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in await get_admin_list()

class BroadcastStates(StatesGroup):
    waiting_for_content = State()

admin_router.message.filter(AdminFilter())
admin_router.callback_query.filter(AdminFilter())

async def send_admin_panel(message: Message):
    stats = await get_users_stats()
    
    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}\n"
        f"üìà –ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: {stats['daily']}\n"
        f"üìä –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['weekly']}\n"
        f"üìã –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {stats['monthly']}"
    )
    
    await message.answer(
        stats_text,
        reply_markup=get_admin_keyboard()
    )

@admin_router.message(Command("admin"))
async def cmd_admin(message: Message):
    await send_admin_panel(message)

@admin_router.callback_query(F.data == "refresh_stats")
async def refresh_stats(callback: CallbackQuery):
    stats = await get_users_stats()
    
    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}\n"
        f"üìà –ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: {stats['daily']}\n"
        f"üìä –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['weekly']}\n"
        f"üìã –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {stats['monthly']}"
    )
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=get_admin_keyboard()
    )

@admin_router.callback_query(F.data == "broadcast")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "- –¢–µ–∫—Å—Ç\n"
        "- –§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º\n"
        "- –§–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞\n\n"
        "–¢–µ–∫—Å—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(BroadcastStates.waiting_for_content)

@admin_router.message(BroadcastStates.waiting_for_content)
async def process_broadcast_content(message: Message, state: FSMContext):
    await state.clear()  # –°—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    status_message = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    users = await get_all_users()
    success_count = 0
    error_count = 0
    
    for user_id in users:
        try:
            if message.photo:
                if message.caption:
                    await message.bot.send_photo(
                        user_id,
                        message.photo[-1].file_id,
                        caption=message.html_text,
                        parse_mode="HTML"
                    )
                else:
                    await message.bot.send_photo(
                        user_id,
                        message.photo[-1].file_id
                    )
            else:
                await message.bot.send_message(
                    user_id,
                    message.html_text,
                    parse_mode="HTML"
                )
            success_count += 1
            await asyncio.sleep(0.05)
            
        except Exception as e:
            error_count += 1
            continue
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await status_message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
        f"üì® –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {error_count}"
    )
    await send_admin_panel(message)

@admin_router.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    await send_admin_panel(callback.message)
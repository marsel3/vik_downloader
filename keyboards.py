from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import get_file

def estimate_video_size(duration: float, quality: str) -> int:
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ–≥–¥–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ.
    """
    BITRATES = {
        '144': 0.3,    # ~0.3 Mbps
        '240': 0.5,    # ~0.5 Mbps
        '360': 1.0,    # ~1.0 Mbps
        '480': 2.5,    # ~2.5 Mbps
        '720': 5.0,    # ~5.0 Mbps
        '1080': 8.0,   # ~8.0 Mbps
        'audio': 0.128  # ~128 kbps –¥–ª—è –∞—É–¥–∏–æ
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç –≤ Mbps
    bitrate = BITRATES.get(quality, 5.0)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Mbps –≤ –±–∞–π—Ç—ã –∏ —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    size_bytes = (bitrate * 1024 * 1024 * duration) / 8
    
    # –î–æ–±–∞–≤–ª—è–µ–º 10% –¥–ª—è —É—á–µ—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    size_bytes *= 1.1
    
    return int(size_bytes)

def format_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if size_bytes < 1024:
        return f"{size_bytes} B"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.1f} KB"
    elif size_bytes < 1024 * 1024 * 1024:
        return f"{size_bytes / (1024 * 1024):.1f} MB"
    else:
        return f"{size_bytes / (1024 * 1024 * 1024):.1f} GB"

async def get_download_keyboard(video_id: int, info: dict) -> InlineKeyboardMarkup:
    keyboard = []
    duration = float(info.get('duration', 0))
    formats = info.get('formats', [])
    url = info.get('source_url', '')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ –≤ –∫—ç—à–µ
    cached_audio = await get_file(video_id, 'audio', 'audio')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤
    audio_format = next((f for f in formats if f.get('format_id') == 'worstaudio'), None)
    audio_size = audio_format.get('filesize', 0) if audio_format else estimate_video_size(duration, 'audio')
    
    # –ê—É–¥–∏–æ –∫–Ω–æ–ø–∫–∞
    if audio_size < 50 * 1024 * 1024:  # –ú–µ–Ω—å—à–µ 50MB
        keyboard.append([
            InlineKeyboardButton(
                text=f"üéµ audio / {format_size(audio_size)} {'‚ö°Ô∏è' if cached_audio else ''}",
                callback_data=f"dl_{video_id}_audio_audio"
            )
        ])
    else:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üéµ audio / {format_size(audio_size)} ‚ö†Ô∏è",
                callback_data=f"size_limit"
            )
        ])

    is_instagram = 'instagram.com' in url
    
    if is_instagram:
        # –î–ª—è Instagram –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É —Å –ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        best_format = max(formats, key=lambda x: x.get('filesize', 0) if x.get('filesize', 0) > 0 else 0)
        if best_format:
            size = best_format.get('filesize', 0)
            cached_video = await get_file(video_id, '720', 'video')
            
            if size < 50 * 1024 * 1024:  # –ú–µ–Ω—å—à–µ 50MB
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"üìπ HD / {format_size(size)} {'‚ö°Ô∏è' if cached_video else ''}",
                        callback_data=f"dl_{video_id}_720_video"
                    )
                ])
            else:
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"üìπ HD / {format_size(size)} ‚ö†Ô∏è",
                        callback_data=f"size_limit"
                    )
                ])
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É
        video_resolutions = [
            ("256x144", "144"),
            ("426x240", "240"),
            ("640x360", "360"),
            ("852x480", "480"),
            ("1280x720", "720"),
            ("1920x1080", "1080")
        ]
        
        for resolution, quality in video_resolutions:
            matching_format = next(
                (f for f in formats if f.get('format_id') == f'url{quality}'), 
                None
            )
            
            if matching_format:
                size = matching_format.get('filesize', 0)
                if not size:
                    size = estimate_video_size(duration, quality)
                
                cached_video = await get_file(video_id, quality, 'video')
                
                if size < 50 * 1024 * 1024:  # –ú–µ–Ω—å—à–µ 50MB
                    keyboard.append([
                        InlineKeyboardButton(
                            text=f"üìπ {resolution} / {format_size(size)} {'‚ö°Ô∏è' if cached_video else ''}",
                            callback_data=f"dl_{video_id}_{quality}_video"
                        )
                    ])
                else:
                    keyboard.append([
                        InlineKeyboardButton(
                            text=f"üìπ {resolution} / {format_size(size)} ‚ö†Ô∏è",
                            callback_data=f"size_limit"
                        )
                    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)